{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether an object contains at least `n` properties (own or inherited) which pass a test implemented by a predicate function.\n*\n* @param {Object} obj - input object\n* @param {PositiveInteger} n - number of properties\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a function\n* @returns {boolean} boolean indicating whether an object contains at least `n` properties which pass a test\n*\n* @example\n* function isNegative( v ) {\n*     return ( v < 0 );\n* }\n*\n* var obj = { a: 1, b: -2, c: 3, d: 4, e: -1 };\n*\n* var bool = someInBy( obj, 2, isNegative );\n* // returns true\n*/\nfunction someInBy( obj, n, predicate, thisArg ) {\n\tvar count;\n\tvar out;\n\tvar key;\n\tif ( !isObject( obj ) ) {\n\t\tthrow new TypeError( format( 'null3L', obj ) );\n\t}\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'null45', n ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'null3N', predicate ) );\n\t}\n\tcount = 0;\n\tfor ( key in obj ) {\n\t\tif (\n\t\t\tObject.prototype.hasOwnProperty.call( obj, key ) ||\n\t\t\tObject.prototype.hasOwnProperty.call( Object.getPrototypeOf( obj ), key )\n\t\t) {\n\t\t\tout = predicate.call( thisArg, obj[ key ], key, obj );\n\t\t\tif ( out ) {\n\t\t\t\tcount += 1;\n\t\t\t\tif ( count === n ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default someInBy;\n"],"names":["someInBy","obj","n","predicate","thisArg","count","key","isObject","TypeError","format","isPositiveInteger","isFunction","Object","prototype","hasOwnProperty","call","getPrototypeOf"],"mappings":";;6YAoDA,SAASA,EAAUC,EAAKC,EAAGC,EAAWC,GACrC,IAAIC,EAEAC,EACJ,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,SAAUR,IAExC,IAAMS,EAAmBR,GACxB,MAAM,IAAIM,UAAWC,EAAQ,SAAUP,IAExC,IAAMS,EAAYR,GACjB,MAAM,IAAIK,UAAWC,EAAQ,SAAUN,IAGxC,IAAMG,KADND,EAAQ,EACKJ,EACZ,IACCW,OAAOC,UAAUC,eAAeC,KAAMd,EAAKK,IAC3CM,OAAOC,UAAUC,eAAeC,KAAMH,OAAOI,eAAgBf,GAAOK,KAE9DH,EAAUY,KAAMX,EAASH,EAAKK,GAAOA,EAAKL,KAE/CI,GAAS,KACMH,EACd,OAAO,EAKX,OAAO,CACR"}